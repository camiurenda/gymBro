This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-07-13T23:21:45.580Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.js
src/App.test.js
src/components/dashboardpage.js
src/components/daysection.js
src/components/excersicecard.js
src/components/header.js
src/components/mobilitysection.js
src/components/modal.js
src/components/navbar.js
src/components/progressiontable.js
src/components/timeInfo.js
src/components/tipssection.js
src/components/weightloform.js
src/components/workoutpage.js
src/context/authContext.js
src/firebase-config.js
src/index.css
src/index.js
src/logo.svg
src/pages/loginPage.js
src/pages/registerPage.js
src/plans.js
src/reportWebVitals.js
src/setupTests.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: package.json
================
{
  "name": "gymbro",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@fortawesome/fontawesome-svg-core": "^6.7.2",
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@testing-library/dom": "^10.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "chart.js": "^4.5.0",
    "firebase": "^11.10.0",
    "react": "^19.1.0",
    "react-chartjs-2": "^5.3.0",
    "react-dom": "^19.1.0",
    "react-router-dom": "^7.6.3",
    "react-scripts": "5.0.1",
    "repopack": "^0.1.45",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>GymBro</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.css
================
/* ================================================
  Paleta de Colores y Estilos Globales
  ================================================ */
:root {
  --bg-main: #1a1a1a;
  --bg-container: #242424;
  --bg-card: #2c2c2c;
  --bg-card-hover: #383838;
  --text-primary: #f0f0f0;
  --text-secondary: #cccccc;
  --text-on-gradient: #ffffff;
  --border-color: #444444;
  --accent-blue: #74b9ff;
  --gradient-header: linear-gradient(135deg, #ff6b6b, #ee5a24);
  --gradient-lunes: linear-gradient(135deg, #fd79a8, #e84393);
  --gradient-martes: linear-gradient(135deg, #fdcb6e, #e17055);
  --gradient-miercoles: linear-gradient(135deg, #6c5ce7, #a29bfe);
  --gradient-jueves: linear-gradient(135deg, #00b894, #00cec9);
  --gradient-tips: linear-gradient(135deg, #d9534f, #c9302c);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: var(--bg-main);
  min-height: 100vh;
  color: var(--text-primary);
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  background: var(--bg-container);
  overflow-x: hidden;
}

/* ================================================
  Navbar
  ================================================ */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: var(--bg-container);
  padding: 10px 20px;
  border-bottom: 1px solid var(--border-color);
}

.nav-links-left,
.nav-links-right {
  display: flex;
  align-items: center;
  gap: 10px;
}

.nav-link {
  display: flex;
  align-items: center;
  gap: 8px;
  color: var(--text-secondary);
  text-decoration: none;
  padding: 10px 15px;
  border-radius: 8px;
  transition: all 0.2s ease-in-out;
  font-weight: bold;
}

.nav-link:hover {
  background-color: var(--bg-card);
  color: var(--text-primary);
}

.nav-link.active {
  background-color: var(--accent-blue);
  color: #1a1a1a;
}

.log-weight-button {
  background-color: transparent;
  border: none;
  cursor: pointer;
  font-family: inherit;
  font-size: inherit;
}

/* ================================================
  Header
  ================================================ */
.header {
  background: var(--gradient-header);
  color: var(--text-on-gradient);
  text-align: center;
  padding: 40px 20px;
  position: relative;
  overflow: hidden;
}

.header h1 {
  font-size: 2.8em;
  margin-bottom: 10px;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
}

.header p {
  font-size: 1.2em;
  opacity: 0.9;
}

/* ================================================
  Secciones Principales
  ================================================ */
.todays-focus {
  padding: 15px;
  margin: 20px;
  border: 2px solid var(--accent-blue);
  border-radius: 20px;
  background: rgba(116, 185, 255, 0.05);
}

.section-title {
  text-align: center;
  margin: 35px 0 20px 0;
  font-size: 1.6em;
  color: var(--text-primary);
  text-transform: uppercase;
  letter-spacing: 1.5px;
}

.rest-day-card {
  padding: 40px 20px;
  text-align: center;
}

.time-info, .mobility-section, .tips-section, .progression-table, .day-section {
  margin: 20px;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

.day-section {
  border: 1px solid var(--border-color);
  overflow: hidden;
}

.time-info, .mobility-section, .tips-section, .progression-table {
  padding: 25px;
}

.day-header {
  padding: 20px;
  color: var(--text-on-gradient);
  font-size: 1.5em;
  font-weight: bold;
  text-align: center;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
}

.lunes { background: var(--gradient-lunes); }
.martes { background: var(--gradient-martes); }
.miercoles { background: var(--gradient-miercoles); }
.jueves { background: var(--gradient-jueves); }

.day-content {
  padding: 25px;
}

/* ================================================
  Tarjetas de Ejercicio y Grillas
  ================================================ */
.exercise-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 15px;
  margin-top: 15px;
}

.exercise-card {
  background: var(--bg-card);
  padding: 20px;
  border-radius: 12px;
  border: 1px solid var(--border-color);
  transition: transform 0.3s ease, background 0.3s ease;
}

.exercise-card.clickable {
  cursor: pointer;
}

.exercise-card.clickable:hover {
  transform: translateY(-5px);
  background: var(--bg-card-hover);
}

.exercise-card h4 {
  color: var(--text-primary);
  margin-bottom: 10px;
  font-size: 1.1em;
  border-bottom: 2px solid var(--accent-blue);
  padding-bottom: 5px;
}

.exercise-details {
  font-size: 0.9em;
  line-height: 1.5;
  color: var(--text-secondary);
}

.reps-badge {
  background: var(--accent-blue);
  color: #1a1a1a;
  padding: 5px 10px;
  border-radius: 20px;
  font-size: 0.8em;
  font-weight: bold;
  display: inline-block;
  margin-top: 10px;
}

/* --- Tracker de Series --- */
.sets-tracker {
  margin-top: 20px;
  padding-top: 15px;
  border-top: 1px solid var(--border-color);
}
.sets-tracker h5 {
  color: var(--text-secondary);
  font-size: 0.9em;
  margin-bottom: 10px;
  text-transform: uppercase;
  letter-spacing: 1px;
}
.sets-grid {
  display: flex;
  flex-direction: column;
  gap: 10px;
}
.set-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px;
  border-radius: 8px;
  background-color: var(--bg-card-hover);
  transition: background-color 0.3s ease;
}
.set-row.completed { background-color: rgba(116, 185, 255, 0.1); }
.set-label { display: flex; align-items: center; }
.set-label label { color: var(--text-primary); cursor: pointer; font-size: 0.95em; }
.set-inputs { display: flex; gap: 8px; }
.set-input {
  width: 60px; /* Ancho fijo para los inputs */
  padding: 8px;
  background-color: var(--bg-main);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
  border-radius: 5px;
  text-align: center;
  font-size: 0.9em;
}

.set-item input {
  appearance: none;
  cursor: pointer;
  width: 20px;
  height: 20px;
  background-color: var(--bg-main);
  border: 2px solid var(--accent-blue);
  border-radius: 5px;
  position: relative;
  margin-right: 8px;
  transition: all 0.2s ease;
}
.set-item input:hover { background-color: var(--bg-card); }
.set-item input:checked { background-color: var(--accent-blue); border-color: var(--accent-blue); }
.set-item input:checked::after {
  content: '';
  position: absolute;
  top: 1px;
  left: 5px;
  width: 6px;
  height: 12px;
  border: solid var(--bg-main);
  border-width: 0 3px 3px 0;
  transform: rotate(45deg);
}

/* ================================================
  Modal
  ================================================ */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.75);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
  backdrop-filter: blur(5px);
}
.modal-content {
  background-color: var(--bg-container);
  padding: 25px;
  border-radius: 15px;
  max-width: 600px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
  border: 1px solid var(--border-color);
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
}
.modal-close-button {
  position: absolute;
  top: 15px;
  right: 15px;
  background: none;
  border: none;
  color: var(--text-secondary);
  font-size: 1.5em;
  cursor: pointer;
}

/* ================================================
  Dashboard
  ================================================ */
.dashboard-container { padding: 20px; display: flex; flex-direction: column; gap: 20px; }
.chart-card { background-color: var(--bg-card); padding: 20px; border-radius: 15px; border: 1px solid var(--border-color); }
.chart-card h3 { color: var(--accent-blue); margin-bottom: 20px; text-align: center; }
.exercise-select {
  width: 100%;
  padding: 10px;
  margin-bottom: 20px;
  background-color: var(--bg-container);
  color: var(--text-primary);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 1em;
}
.chart-placeholder { text-align: center; color: var(--text-secondary); padding: 40px 0; }
.weight-input-section { display: flex; gap: 10px; justify-content: center; margin-bottom: 20px; }
.save-button {
  padding: 8px 15px;
  border: none;
  border-radius: 5px;
  background-color: var(--accent-blue);
  color: #1a1a1a;
  font-weight: bold;
  cursor: pointer;
}

/* ================================================
  Iconos
  ================================================ */
.header-icon { margin-right: 15px; }
.section-icon { margin-right: 12px; color: var(--accent-blue); }

/* ================================================
  ################################################
  ###   ESTILOS PARA PANTALLAS PEQUEÑAS (MÓVIL)  ###
  ################################################
  ================================================ */
@media (max-width: 768px) {
  body {
    font-size: 14px;
    padding: 0;
  }
  .container {
    margin: 0;
    border-radius: 0;
    padding-bottom: 20px;
  }

  /* --- Navbar --- */
  .navbar {
    padding: 5px;
    justify-content: space-around; /* Distribuye el espacio de manera uniforme */
  }
  .nav-link {
    padding: 8px;
    font-size: 0.9em; /* Reduce un poco el tamaño del texto */
  }
  .nav-link span {
    display: none; /* Oculta el texto en pantallas pequeñas */
  }

  /* --- Títulos y Texto --- */
  .header h1 { font-size: 1.6em; }
  .header p { font-size: 0.9em; }
  .section-title { font-size: 1.2em; margin: 20px 0 10px 0; }
  .day-header { font-size: 1.1em; padding: 15px; }
  .exercise-card h4 { font-size: 1em; margin-bottom: 8px; }
  .exercise-details { font-size: 0.8em; line-height: 1.4; }
  .reps-badge { font-size: 0.7em; padding: 4px 8px; }

  /* --- Espaciados y Márgenes --- */
  .day-section, .time-info, .mobility-section, .tips-section, .progression-table, .dashboard-container {
    margin: 10px;
    padding: 15px;
    border-radius: 10px;
  }
  .day-content { padding: 15px; }
  .exercise-card { padding: 15px; border-radius: 10px; }
  .header { padding: 20px 10px; }
  .todays-focus { padding: 10px; margin: 10px; border-width: 1px; border-radius: 15px; }

  /* --- Registro de Series (CORRECCIÓN IMPORTANTE) --- */
  .set-row {
    flex-direction: row; /* Volvemos a la disposición horizontal */
    align-items: center; /* Centramos verticalmente los elementos */
    justify-content: space-between; /* Espacio entre la etiqueta y los inputs */
    gap: 10px; /* Reducimos el espacio entre elementos */
    padding: 8px; /* Reducimos el padding de la fila */
  }
  .set-inputs {
    display: flex;
    gap: 5px; /* Reducimos el espacio entre los inputs */
    flex-shrink: 0; /* Evita que los inputs se encojan demasiado */
  }
  .set-input {
    width: 40px; /* Reducimos el ancho de los inputs */
    padding: 5px; /* Reducimos el padding de los inputs */
    font-size: 0.8em; /* Reducimos el tamaño de la fuente */
  }
  .set-label label {
    font-size: 0.9em;
  }
  .sets-tracker h5 {
    font-size: 0.8em;
    margin-bottom: 5px;
  }

  /* --- Checkboxes de Series --- */
  .set-item {
    gap: 5px;
  }
  .set-item input {
    width: 16px;
    height: 16px;
    margin-right: 4px;
  }

  /* --- Modal --- */
  .modal-content {
    padding: 20px;
    border-radius: 10px;
  }
  .modal-close-button {
    top: 10px;
    right: 10px;
    font-size: 1.2em;
  }

  /* --- Dashboard --- */
  .dashboard-container { padding: 10px; gap: 15px; }
  .chart-card { padding: 15px; border-radius: 10px; }
  .chart-card h3 { font-size: 1.1em; margin-bottom: 10px; }
  .exercise-select { padding: 8px; font-size: 0.9em; margin-bottom: 10px; }
  .weight-input-section { gap: 5px; margin-bottom: 10px; }
  .save-button { padding: 6px 10px; font-size: 0.9em; }
  .chart-placeholder { padding: 20px 0; font-size: 0.9em; }
}

/* Estilos para los formularios de Autenticación */
.auth-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px 20px;
  height: calc(100vh - 50px); /* Ocupa casi toda la pantalla */
}
.auth-container h2 {
  color: var(--accent-blue);
  margin-bottom: 20px;
}
.auth-container form {
  display: flex;
  flex-direction: column;
  gap: 15px;
  width: 100%;
  max-width: 350px;
}
.auth-container input {
  padding: 12px;
  border-radius: 8px;
  border: 1px solid var(--border-color);
  background-color: var(--bg-card);
  color: var(--text-primary);
  font-size: 1em;
}
.auth-container button {
  padding: 12px;
  border-radius: 8px;
  border: none;
  background-color: var(--accent-blue);
  color: #1a1a1a;
  font-weight: bold;
  font-size: 1em;
  cursor: pointer;
}
.auth-container p {
  margin-top: 20px;
}
.auth-container a {
  color: var(--accent-blue);
  text-decoration: none;
  font-weight: bold;
}
.auth-error {
  color: #ff6b6b;
  background-color: rgba(255, 107, 107, 0.1);
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 15px;
  text-align: center;
}

================
File: src/App.js
================
// src/App.js
import React from 'react';
import { Routes, Route, Navigate } from 'react-router-dom';
import { useAuth } from './context/authContext';
import './App.css';

// Importamos componentes y páginas
import Navbar from './components/navbar';
import WorkoutPage from './components/workoutpage';
import DashboardPage from './components/dashboardpage';
import LoginPage from './pages/loginPage';
import RegisterPage from './pages/registerPage';

// Un componente especial para proteger rutas
function ProtectedRoute({ children }) {
  const { currentUser } = useAuth();
  return currentUser ? children : <Navigate to="/login" />;
}

function App() {
  const { currentUser } = useAuth();

  return (
    <div className="container">
      {/* Mostramos la Navbar solo si hay un usuario conectado */}
      {currentUser && <Navbar />} 
      <main>
        <Routes>
          <Route path="/login" element={<LoginPage />} />
          <Route path="/register" element={<RegisterPage />} />
          
          {/* Rutas Protegidas */}
          <Route 
            path="/" 
            element={
              <ProtectedRoute>
                <WorkoutPage />
              </ProtectedRoute>
            } 
          />
          <Route 
            path="/dashboard" 
            element={
              <ProtectedRoute>
                <DashboardPage />
              </ProtectedRoute>
            } 
          />
        </Routes>
      </main>
    </div>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/dashboardpage.js
================
import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// Registramos los componentes de Chart.js que vamos a usar.
// Esto es necesario para que Chart.js sepa qué elementos dibujar.
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const DashboardPage = () => {
  // --- ESTADOS DEL COMPONENTE ---
  const [exerciseProgress, setExerciseProgress] = useState({});
  const [availableExercises, setAvailableExercises] = useState([]);
  const [selectedExercise, setSelectedExercise] = useState('');
  const [exerciseChartData, setExerciseChartData] = useState({ datasets: [] });
  const [weightLog, setWeightLog] = useState([]);

  // --- EFECTO PARA CARGAR TODOS LOS DATOS DESDE LOCALSTORAGE AL INICIAR ---
  useEffect(() => {
    // 1. Cargar datos de progreso de ejercicios
    const allProgress = {};
    const exerciseSet = new Set();

    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key.startsWith('progress-')) {
        const dayData = JSON.parse(localStorage.getItem(key));
        for (const exerciseTitle in dayData) {
          if (!allProgress[exerciseTitle]) {
            allProgress[exerciseTitle] = [];
          }
          exerciseSet.add(exerciseTitle);
          allProgress[exerciseTitle].push(...dayData[exerciseTitle]);
        }
      }
    }
    setExerciseProgress(allProgress);
    setAvailableExercises(Array.from(exerciseSet));

    // 2. Cargar datos de peso corporal
    const savedWeightLog = JSON.parse(localStorage.getItem('bodyWeightLog')) || [];
    setWeightLog(savedWeightLog);
  }, []); // El array vacío [] significa que este efecto se ejecuta solo una vez.

  // --- EFECTO PARA ACTUALIZAR EL GRÁFICO CUANDO CAMBIA EL EJERCICIO SELECCIONADO ---
  useEffect(() => {
    if (selectedExercise && exerciseProgress[selectedExercise]) {
      const progressForExercise = exerciseProgress[selectedExercise];
      
      const maxWeights = progressForExercise
        .filter(set => set.completed && set.weight)
        .map(set => parseFloat(set.weight));

      setExerciseChartData({
        labels: maxWeights.map((_, index) => `Sesión ${index + 1}`),
        datasets: [{
          label: `Peso Máx. en ${selectedExercise} (kg)`,
          data: maxWeights,
          borderColor: 'rgb(116, 185, 255)',
          backgroundColor: 'rgba(116, 185, 255, 0.5)',
          tension: 0.1
        }]
      });
    }
  }, [selectedExercise, exerciseProgress]); // Se ejecuta cada vez que estas variables cambian.

  // --- DATOS Y OPCIONES PARA LOS GRÁFICOS ---
  const weightChartData = {
    labels: weightLog.map(log => log.date),
    datasets: [{
      label: 'Peso Corporal (kg)',
      data: weightLog.map(log => log.weight),
      borderColor: 'rgb(255, 99, 132)',
      backgroundColor: 'rgba(255, 99, 132, 0.5)',
    }]
  };
  
  const chartOptions = (text) => ({
    responsive: true,
    plugins: {
      legend: { position: 'top', labels: { color: '#f0f0f0' } },
      title: { display: true, text, color: '#f0f0f0', font: { size: 18 } },
    },
    scales: {
      y: { ticks: { color: '#f0f0f0' }, grid: { color: 'rgba(240, 240, 240, 0.1)' } },
      x: { ticks: { color: '#f0f0f0' }, grid: { color: 'rgba(240, 240, 240, 0.1)' } }
    }
  });

  return (
    <div className="dashboard-container">
      <h2 className="section-title">Tu Progreso</h2>
      
      {/* CARD PARA EL GRÁFICO DE EVOLUCIÓN DE FUERZA */}
      <div className="chart-card">
        <h3>Evolución de Fuerza</h3>
        <select className="exercise-select" value={selectedExercise} onChange={(e) => setSelectedExercise(e.target.value)}>
          <option value="">Selecciona un ejercicio...</option>
          {availableExercises.map(ex => <option key={ex} value={ex}>{ex}</option>)}
        </select>
        {selectedExercise ? (
          <Line options={chartOptions('Progreso de Fuerza')} data={exerciseChartData} />
        ) : <p className="chart-placeholder">Elige un ejercicio para ver tu progreso.</p>}
      </div>

      {/* CARD PARA EL GRÁFICO DE EVOLUCIÓN DEL PESO CORPORAL */}
      <div className="chart-card">
        <h3>Evolución del Peso Corporal</h3>
        {weightLog.length > 0 ? (
          <Line options={chartOptions('Progreso de Peso Corporal')} data={weightChartData} />
        ) : (
          <p className="chart-placeholder">
            Aún no hay registros de peso. ¡Agrega el primero desde el botón de la barra de navegación!
          </p>
        )}
      </div>
    </div>
  );
};

export default DashboardPage;

================
File: src/components/daysection.js
================
import React, { useState, useEffect } from 'react';
import ExerciseCard from './excersicecard';
import Modal from './modal'; // Importamos el componente Modal

const DaySection = ({ day, title, theme, exercises }) => {
  const storageKey = `progress-${day}`;
  
  // ESTADO DEL PROGRESO (CHECboxes, PESO, REPS)
  const [progress, setProgress] = useState(() => {
    const savedProgress = localStorage.getItem(storageKey);
    return savedProgress ? JSON.parse(savedProgress) : {};
  });

  // ESTADO DEL MODAL (PARA VER DETALLES DEL EJERCICIO)
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedExercise, setSelectedExercise] = useState(null);

  // EFECTO PARA GUARDAR EL PROGRESO EN LOCALSTORAGE
  useEffect(() => {
    localStorage.setItem(storageKey, JSON.stringify(progress));
  }, [progress, storageKey]);


  // --- FUNCIÓN PARA MANEJAR CAMBIOS EN EL PROGRESO (LA QUE FALTABA) ---
  const handleSetChange = (exerciseTitle, setIndex, field, value) => {
    const newProgress = JSON.parse(JSON.stringify(progress));

    if (!newProgress[exerciseTitle]) {
      const numSets = parseInt(exercises
        .flatMap(group => group.list)
        .find(ex => ex.title === exerciseTitle)
        .reps) || 0;
      
      newProgress[exerciseTitle] = Array(numSets).fill({
        completed: false,
        weight: '',
        reps: ''
      });
    }

    newProgress[exerciseTitle][setIndex] = {
        ...newProgress[exerciseTitle][setIndex],
        [field]: value
    };

    // AQUÍ VOLVEMOS A USAR setProgress, ARREGLANDO EL WARNING Y LA FUNCIONALIDAD
    setProgress(newProgress);
  };
  
  // --- FUNCIONES PARA CONTROLAR EL MODAL ---
  const openExerciseDetails = (exercise) => {
    setSelectedExercise(exercise);
    setIsModalOpen(true);
  };

  const closeExerciseDetails = () => {
    setIsModalOpen(false);
    setSelectedExercise(null);
  };

  return (
    <>
      <div className={`day-section ${theme}`}>
        <div className={`day-header ${theme}`}>{day} - {title}</div>
        <div className="day-content">
          {exercises.map(group => (
            <div key={group.groupName} className="muscle-group">
              <h4>{group.groupName}</h4>
              <div className="exercise-grid">
                {group.list.map(ex => (
                  <ExerciseCard
                    key={ex.title}
                    exerciseData={ex}
                    setsData={progress[ex.title] || []}
                    // VOLVEMOS A PASAR LAS DOS FUNCIONES COMO PROPS
                    onSetChange={(setIndex, field, value) => handleSetChange(ex.title, setIndex, field, value)}
                    onCardClick={() => openExerciseDetails(ex)}
                  />
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      <Modal isOpen={isModalOpen} onClose={closeExerciseDetails}>
        {selectedExercise && (
          <div className="exercise-details-modal">
            <h2>{selectedExercise.title}</h2>
            <img src={selectedExercise.gifUrl} alt={`GIF animado de ${selectedExercise.title}`} className="exercise-gif" />
            <h3>Técnica Detallada</h3>
            <p>{selectedExercise.detailedTechnique}</p>
            <h3>Errores Comunes</h3>
            <p>{selectedExercise.commonMistakes}</p>
          </div>
        )}
      </Modal>
    </>
  );
};

export default DaySection;

================
File: src/components/excersicecard.js
================
import React from 'react';

/**
 * ExerciseCard: Un componente "controlado" que muestra un solo ejercicio.
 * No tiene estado propio; recibe todos sus datos y funciones de su padre (DaySection).
 * * Props:
 * - exerciseData: Un objeto con toda la info del ejercicio (title, details, reps, gifUrl, etc.).
 * - setsData: Un array de objetos, donde cada objeto representa una serie ({ completed, weight, reps }).
 * - onSetChange: Una función que se llama cuando se modifica cualquier input de una serie (el checkbox, el peso o las reps).
 * - onCardClick: Una función que se llama cuando se hace clic en la tarjeta para abrir el modal de detalles.
 */
const ExerciseCard = ({ exerciseData = {}, setsData = [], onSetChange, onCardClick }) => {
// Desestructuramos los datos del ejercicio para usarlos más fácilmente en el JSX.
  const { title, details, muscles, reps } = exerciseData;

  // Calculamos el número de series para tener un valor de respaldo.
  const numberOfSets = parseInt(reps) || 0;

  // Si no hay datos de progreso guardados para este ejercicio, creamos una estructura por defecto para mostrar.
  const sets = setsData.length > 0 ? setsData : Array(numberOfSets).fill({
    completed: false,
    weight: '',
    reps: ''
  });

  return (
    // 1. La tarjeta entera es clicable y llama a `onCardClick` para abrir el modal.
    //    La clase 'clickable' le da el cursor de puntero.
    <div className="exercise-card clickable" onClick={onCardClick}>
      
      <h4>{title}</h4>
      <div className="exercise-details">
        <strong>Técnica:</strong> {details}<br />
        <strong>Músculos:</strong> {muscles}
        <div className="reps-badge">{reps}</div>
      </div>

      {/* 2. El contenedor del tracker detiene la propagación del clic.
             Esto es un truco para que, si hacés clic en un input o checkbox,
             NO se dispare el `onClick` de la tarjeta principal y no se abra el modal. */}
      <div className="sets-tracker" onClick={(e) => e.stopPropagation()}>
        <h5>Seguimiento de Series:</h5>
        <div className="sets-grid">
          {sets.map((setData, index) => (
            // La clase 'completed' se añade condicionalmente para el estilo visual.
            <div key={index} className={`set-row ${setData.completed ? 'completed' : ''}`}>
              <div className="set-label">
                <input
                  type="checkbox"
                  id={`${title}-set-${index}`}
                  checked={setData.completed}
                  // Llama a la función del padre pasándole el índice, el campo a cambiar ('completed') y el nuevo valor.
                  onChange={(e) => onSetChange(index, 'completed', e.target.checked)}
                />
                <label htmlFor={`${title}-set-${index}`}>
                  Serie {index + 1}
                </label>
              </div>
              <div className="set-inputs">
                <input
                  type="number"
                  className="set-input"
                  placeholder="kg"
                  value={setData.weight}
                  // Llama a la función del padre pasándole el índice, el campo ('weight') y el nuevo valor.
                  onChange={(e) => onSetChange(index, 'weight', e.target.value)}
                />
                <input
                  type="number"
                  className="set-input"
                  placeholder="reps"
                  value={setData.reps}
                   // Llama a la función del padre pasándole el índice, el campo ('reps') y el nuevo valor.
                  onChange={(e) => onSetChange(index, 'reps', e.target.value)}
                />
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default ExerciseCard;

================
File: src/components/header.js
================
import React from 'react';

const Header = () => (
  <div className="header">
    <h1>💪 Plan de Entrenamiento</h1>
    <p>Diseñado especialmente para Cami</p>
  </div>
);

export default Header;

================
File: src/components/mobilitysection.js
================
import React from 'react';
import ExerciseCard from './excersicecard'; // Reutilizaremos una tarjeta de ejercicio

const mobilityExercises = [
    { title: "Puente Plancha Frontal (Plank)", details: "Boca abajo, antebrazos y puntas de pies, cuerpo recto", muscles: "Core completo (abdominales, lumbares, glúteos)", reps: "2 series x 30 seg" },
    { title: "Movilidad Lateral con Banda", details: "Rotación de torso con banda elástica, cadera estable", muscles: "Abdominales oblicuos, movilidad columna", reps: "2 series x 12 reps" }
];

const MobilitySection = () => (
    <div className="mobility-section">
        <h3>🧘‍♀️ Movilidad Articular (Todos los días - 10 min)</h3>
        <div className="exercise-grid">
            {mobilityExercises.map(ex => <ExerciseCard key={ex.title} {...ex} />)}
        </div>
    </div>
);

export default MobilitySection;

================
File: src/components/modal.js
================
import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faTimes } from '@fortawesome/free-solid-svg-icons';

const Modal = ({ isOpen, onClose, children }) => {
  // Si el modal no está abierto, no renderiza nada.
  if (!isOpen) {
    return null;
  }

  return (
    // El "portal-overlay" es el fondo oscuro semitransparente.
    <div className="modal-overlay" onClick={onClose}>
      {/* Detenemos la propagación del clic para que no se cierre al hacer clic dentro del contenido. */}
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <button className="modal-close-button" onClick={onClose}>
          <FontAwesomeIcon icon={faTimes} />
        </button>
        {children}
      </div>
    </div>
  );
};

export default Modal;

================
File: src/components/navbar.js
================
// src/components/Navbar.js
import React from 'react';
import { NavLink, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/authContext';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faHome, faChartLine, faSignOutAlt } from '@fortawesome/free-solid-svg-icons';

const Navbar = () => {
  const { logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
    } catch {
      console.error("Error al cerrar sesión");
    }
  };

  return (
    <nav className="navbar">
      <div className="nav-links-left">
        <NavLink to="/" className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}>
          <FontAwesomeIcon icon={faHome} /> <span>Entrenamiento</span>
        </NavLink>
        <NavLink to="/dashboard" className={({ isActive }) => isActive ? "nav-link active" : "nav-link"}>
          <FontAwesomeIcon icon={faChartLine} /> <span>Progreso</span>
        </NavLink>
      </div>
      <div className="nav-links-right">
        <button className="nav-link log-weight-button" onClick={handleLogout}>
          <FontAwesomeIcon icon={faSignOutAlt} /> <span>Cerrar Sesión</span>
        </button>
      </div>
    </nav>
  );
};

export default Navbar;

================
File: src/components/progressiontable.js
================
import React from 'react';

const ProgressionTable = () => (
    <div className="progression-table">
        <table>
            <thead>
                <tr>
                    <th>Semana</th>
                    <th>Series x Repeticiones</th>
                    <th>Notas</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><strong>1 y 2</strong></td>
                    <td>3 x 12</td>
                    <td>Aprender técnica, pesos bajos/moderados</td>
                </tr>
                <tr>
                    <td><strong>3 y 4</strong></td>
                    <td>3 x 14</td>
                    <td>Progresión suave, un poco más de esfuerzo</td>
                </tr>
                <tr>
                    <td><strong>5 a 8</strong></td>
                    <td>3 x 12</td>
                    <td>Sube la carga (peso)</td>
                </tr>
            </tbody>
        </table>
    </div>
);

export default ProgressionTable;

================
File: src/components/timeInfo.js
================
import React from 'react';

const TimeInfo = () => (
  <div className="time-info">
    <h3>⏰ Horario de Entrenamiento</h3>
    <p><strong>6:30 - 7:20 (50-55 minutos)</strong></p>
    <p>• 5 min caminadora de activación<br />
    • 2-3 ejercicios de activación rápida<br />
    • Entrenamiento principal<br />
    • Pausas: 30-45 seg entre series</p>
  </div>
);

export default TimeInfo;

================
File: src/components/tipssection.js
================
import React from 'react';

const TipsSection = () => (
    <div className="tips-section">
        <h3>💡 Tips Finales</h3>
        <div className="tips-list">
            <div className="tip-item"><strong>Preparación:</strong> Entrá con ropa lista y usá cronómetro entre series</div>
            <div className="tip-item"><strong>Concentración:</strong> No te distraigas con el celular entre ejercicios</div>
            <div className="tip-item"><strong>Flexibilidad:</strong> Podés dividir días si te falta tiempo</div>
            <div className="tip-item"><strong>Prioridad:</strong> ¡La técnica va primero! Mejor menos peso y buena forma</div>
        </div>
    </div>
);

export default TipsSection;

================
File: src/components/weightloform.js
================
import React, { useState } from 'react';

const WeightLogForm = ({ onSave }) => {
  const [weight, setWeight] = useState('');

  const handleSave = () => {
    // Llama a la función onSave pasada por props solo si el valor es válido
    if (weight && !isNaN(weight)) {
      onSave(parseFloat(weight));
    }
  };

  return (
    <div className="weight-log-form">
      <h3>Registrar Peso Corporal</h3>
      <p>Ingresa tu peso actual para seguir tu evolución.</p>
      <div className="weight-input-section">
        <input
          type="number"
          value={weight}
          onChange={(e) => setWeight(e.target.value)}
          placeholder="Tu peso en kg"
          className="set-input"
        />
        <button className="save-button" onClick={handleSave}>Guardar</button>
      </div>
    </div>
  );
};

export default WeightLogForm;

================
File: src/components/workoutpage.js
================
// src/components/workoutpage.js
import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/authContext';
import { db } from '../firebase-config';
import { doc, getDoc, setDoc } from 'firebase/firestore';
import { planCami } from '../plans';

import Header from './header';
import DaySection from './daysection';

const WorkoutPage = () => {
  const { currentUser } = useAuth();
  const [workoutPlan, setWorkoutPlan] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (!currentUser) return;

    const fetchWorkoutPlan = async () => {
      setLoading(true);
      // 1. Apuntamos al documento del usuario actual en la colección 'workoutPlans'
      const planRef = doc(db, 'workoutPlans', currentUser.uid);
      const planSnap = await getDoc(planRef);

      if (planSnap.exists()) {
        // 2. Si encontramos el plan, lo ponemos en el estado de la página
        setWorkoutPlan(planSnap.data());
      } else {
        // Esto pasa si tu cuenta (ya creada) no tiene un plan asignado
        console.log("No se encontró un plan de entrenamiento para este usuario.");
      }
      setLoading(false);
    };

    fetchWorkoutPlan();
  }, [currentUser]);

  if (loading) {
    return <div className="auth-container"><h2>Cargando tu plan...</h2></div>;
  }

 const handleAssignMyPlan = async () => {
    if (!currentUser) return;
    const planRef = doc(db, "workoutPlans", currentUser.uid);
    await setDoc(planRef, planCami);
    alert("¡Tu plan fue asignado! La página se recargará.");
    window.location.reload();
  };

  if (!workoutPlan) {
    return (
      <div className="auth-container">
        <h2>¡Hola!</h2>
        <p>Parece que no tenés un plan de entrenamiento asignado.</p>
        {/* ---- BOTÓN TEMPORAL ---- */}
        <button className="save-button" style={{marginTop: '20px'}} onClick={handleAssignMyPlan}>
          Asignarme mi Plan Original
        </button>
        {/* ------------------------- */}
      </div>
    );
  }

  // 3. Si todo está bien, mostramos el plan que vino de la base de datos
  return (
    <>
      <Header />
      <h2 className="section-title">Tu Semana</h2>
      {workoutPlan.trainingDays.map(dayData => (
        <DaySection
          key={dayData.day}
          day={dayData.day}
          title={dayData.title}
          theme={dayData.theme}
          exercises={dayData.exercises}
        />
      ))}
    </>
  );
};

export default WorkoutPage;

================
File: src/context/authContext.js
================
// src/context/AuthContext.js
import React, { useContext, useState, useEffect } from 'react';
import { auth, db } from '../firebase-config';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';
import { doc, setDoc } from 'firebase/firestore';
import { planNovia } from '../plans'; 

const AuthContext = React.createContext();

export function useAuth() {
  return useContext(AuthContext);
}

export function AuthProvider({ children }) {
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);

    async function register(email, password) {
    const userCredential = await createUserWithEmailAndPassword(auth, email, password);
    const user = userCredential.user;
    const planRef = doc(db, "workoutPlans", user.uid);
    
    // Aquí nos aseguramos de pasar un OBJETO
    await setDoc(planRef, defaultPlan); 

    return userCredential;
  }
  
  // Las funciones de login y logout no cambian
  function login(email, password) {
    return signInWithEmailAndPassword(auth, email, password);
  }

  function logout() {
    return signOut(auth);
  }

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user);
      setLoading(false);
    });
    return unsubscribe;
  }, []);

  const value = { currentUser, register, login, logout };

  return (
    <AuthContext.Provider value={value}>
      {!loading && children}
    </AuthContext.Provider>
  );
}

================
File: src/firebase-config.js
================
import { initializeApp } from "firebase/app";
import { getAuth } from "firebase/auth";
import { getFirestore } from "firebase/firestore";

// Your web app's Firebase configuration
const firebaseConfig = {
  apiKey: "AIzaSyClfNyySdbKDVFPeKgYmT4R1qUoR6VAmdQ",
  authDomain: "gymbro-e5b16.firebaseapp.com",
  projectId: "gymbro-e5b16",
  storageBucket: "gymbro-e5b16.firebasestorage.app",
  messagingSenderId: "792521511745",
  appId: "1:792521511745:web:111fb842e21434e49047c0"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);

export const auth = getAuth(app); // El servicio de autenticación
export const db = getFirestore(app); // El servicio de la base de datos (Firestore)

================
File: src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import { BrowserRouter } from 'react-router-dom';
import { AuthProvider } from './context/authContext'; // 1. Importamos nuestro AuthProvider
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <BrowserRouter>
      {/* 2. Envolvemos la App con AuthProvider */}
      <AuthProvider>
        <App />
      </AuthProvider>
    </BrowserRouter>
  </React.StrictMode>
);

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/pages/loginPage.js
================
// src/pages/LoginPage.js
import React, { useState } from 'react';
import { useAuth } from '../context/authContext';
import { useNavigate, Link } from 'react-router-dom';

const LoginPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      await login(email, password);
      navigate('/');
    } catch {
      setError('Error al iniciar sesión. Verifica tus credenciales.');
    }
  };

  return (
    <div className="auth-container">
      <h2>Iniciar Sesión</h2>
      {error && <p className="auth-error">{error}</p>}
      <form onSubmit={handleSubmit}>
        <input type="email" placeholder="Email" onChange={(e) => setEmail(e.target.value)} required />
        <input type="password" placeholder="Contraseña" onChange={(e) => setPassword(e.target.value)} required />
        <button type="submit">Ingresar</button>
      </form>
      <p>¿No tenés cuenta? <Link to="/register">Registrate</Link></p>
    </div>
  );
};

export default LoginPage;

================
File: src/pages/registerPage.js
================
// src/pages/RegisterPage.js
import React, { useState } from 'react';
import { useAuth } from '../context/authContext';
import { useNavigate, Link } from 'react-router-dom';

const RegisterPage = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { register } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      await register(email, password);
      navigate('/');
    } catch {
      setError('Error al crear la cuenta.');
    }
  };

  return (
    <div className="auth-container">
      <h2>Crear Cuenta</h2>
      {error && <p className="auth-error">{error}</p>}
      <form onSubmit={handleSubmit}>
        <input type="email" placeholder="Email" onChange={(e) => setEmail(e.target.value)} required />
        <input type="password" placeholder="Contraseña (mín. 6 caracteres)" onChange={(e) => setPassword(e.target.value)} required />
        <button type="submit">Registrarse</button>
      </form>
      <p>¿Ya tenés cuenta? <Link to="/login">Iniciá Sesión</Link></p>
    </div>
  );
};

export default RegisterPage;

================
File: src/plans.js
================
export const planCami = [
  {
    day: 'LUNES',
    title: 'Piernas/Glúteos',
    theme: 'lunes',
    exercises: [
      {
        groupName: 'Piernas y Glúteos',
        list: [
          { 
            title: "Sillón de Cuádriceps", 
            details: "Máquina: Extensión de piernas sentada. No bloquear rodillas, movimiento lento.", 
            muscles: "Cuádriceps", 
            reps: "3 series x 12 reps",
            gifUrl:'https://media1.tenor.com/m/bqKtsSuqilQAAAAC/gym.gif', 
            detailedTechnique: "Siéntate en la máquina con la espalda completamente apoyada. Ajusta el respaldo y la almohadilla para que quede sobre tus tobillos. Extiende las piernas de forma controlada hasta casi la extensión completa (sin bloquear las rodillas). Baja lentamente controlando el peso.",
            commonMistakes: "No bloquear completamente las rodillas en la extensión. Evitar movimientos bruscos o usar impulso. No dejar que el peso caiga bruscamente al bajar."
          },
          { 
            title: "Camilla de Isquio", 
            details: "Máquina: Curl femoral boca abajo. Movimiento lento, sin rebotes.", 
            muscles: "Isquiotibiales", 
            reps: "3 series x 12 reps",
            gifUrl:'https://media1.tenor.com/m/fj_cZPprAyMAAAAC/gym.gif',
            detailedTechnique: "Acuéstate boca abajo en la camilla con las rodillas alineadas con el eje de rotación de la máquina. Coloca los tobillos bajo la almohadilla. Flexiona las rodillas llevando los talones hacia los glúteos de forma controlada. Baja lentamente hasta la posición inicial.",
            commonMistakes: "No levantar las caderas de la camilla durante el movimiento. Evitar los rebotes al final del recorrido. No usar todo el rango de movimiento disponible."
          },
          { 
            title: "Prensa 45°",  
            details: "No despegar glúteos, control total", 
            muscles: "Glúteos, cuádriceps, isquios", 
            reps: "3 series x 12 reps",
            gifUrl:'https://media1.tenor.com/m/yBaS_oBgidsAAAAd/gym.gif',
            detailedTechnique: "Coloca los pies en la plataforma a la anchura de los hombros. Empuja la plataforma hasta que las piernas estén casi extendidas (sin bloquear las rodillas). Baja de forma controlada hasta formar un ángulo de 90 grados o hasta donde tu flexibilidad te permita.",
            commonMistakes: "No dejes que la zona lumbar se despegue del asiento. Evita los rebotes al final del movimiento. No colocar los pies muy arriba o muy abajo en la plataforma."
          },
          { 
            title: "Aducción en Sillón", 
            details: "Máquina: Juntador de piernas. Movimiento controlado.", 
            muscles: "Aductores (parte interna)", 
            reps: "3 series x 12 reps",
            gifUrl:'https://media1.tenor.com/m/N62v0esa3K8AAAAC/innerouter-thigh-machine.gif',
            detailedTechnique: "Siéntate en la máquina con la espalda bien apoyada. Coloca las piernas contra las almohadillas en la posición más amplia cómoda. Junta las piernas de forma controlada contrayendo los aductores. Regresa lentamente a la posición inicial manteniendo la tensión.",
            commonMistakes: "No usar un rango excesivo que cause dolor. Evitar movimientos bruscos o usar impulso. No relajar completamente los músculos en la posición inicial."
          },
          { 
            title: "Subida al Cajón", 
            details: "Material: Banco/cajón alto. Control total, no impulso.", 
            muscles: "Glúteos, cuádriceps, core", 
            reps: "3 series x 12 reps",
            gifUrl:'https://gymvisual.com/img/p/3/6/7/0/7/36707.gif',
            detailedTechnique: "Colócate frente a un banco o cajón de altura apropiada (rodilla a 90° al subir). Sube completamente con una pierna, llevando la rodilla contraria hacia arriba. Baja de forma controlada con la misma pierna que subiste. Alterna las piernas o completa todas las repeticiones con una antes de cambiar.",
            commonMistakes: "No usar impulso para subir. Evitar apoyar la segunda pierna en el cajón para ayudarte. No bajar de forma descontrolada o saltar al bajar."
          },
          { 
            title: "Estocada Dinámica", 
            details: "Material: Mancuernas o barra. Paso largo, espalda recta.", 
            muscles: "Glúteos, cuádriceps, isquios, core", 
            reps: "3 series x 12 reps", 
            gifUrl:'https://gymvisual.com/img/p/7/0/2/5/7025.gif',
            detailedTechnique: "Da un paso largo hacia adelante manteniendo el torso erguido. Baja flexionando ambas rodillas hasta que la de atrás casi toque el suelo y la de adelante forme 90°. Empuja con el talón delantero para volver a la posición inicial. Puedes alternar piernas o completar todas las repeticiones con una pierna.",
            commonMistakes: "No inclinarse hacia adelante con el tronco. Evitar que la rodilla delantera sobrepase la punta del pie. No hacer el paso demasiado corto."
          },
        ]
      }
    ]
  },
  {
    day: 'MARTES',
    title: 'Piernas + Tren Superior',
    theme: 'martes',
    exercises: [
      {
        groupName: 'Piernas',
        list: [
          { 
            title: "Peso Muerto", 
            details: "Material: Mancuernas o barra. Espalda recta SIEMPRE, glúteos hacia atrás.", 
            muscles: "Glúteos, isquios, espalda baja", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Párate con los pies a la anchura de las caderas, sostén la barra o mancuernas frente a ti. Mantén la espalda recta y empuja los glúteos hacia atrás mientras bajas el peso. Baja hasta sentir el estiramiento en los isquiotibiales. Regresa a la posición inicial empujando las caderas hacia adelante.",
            commonMistakes: "No redondear la espalda en ningún momento. Evitar que las rodillas se muevan hacia adelante. No bajar más allá de tu flexibilidad natural."
          },
          { 
            title: "Sentadilla con Banda + Carga", 
            details: "Material: Banda en rodillas + peso. Bajar hasta 90° o más, control total.", 
            muscles: "Cuádriceps, glúteos, isquios, core", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Coloca una banda elástica alrededor de las rodillas y sostén peso (mancuernas o barra). Separa los pies a la anchura de los hombros. Baja como si fueras a sentarte en una silla, manteniendo las rodillas alineadas con los pies y empujando contra la banda. Baja hasta 90° o más si es posible.",
            commonMistakes: "No permitir que las rodillas se junten hacia adentro. Evitar inclinarse demasiado hacia adelante. No relajar la tensión de la banda durante el movimiento."
          },
          { 
            title: "Empuje de Caderas (Hip Thrust)", 
            details: "Material: Banco + barra. Foco en glúteos, no arquear espalda.", 
            muscles: "Glúteos, isquios, core", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Apoya la espalda media en un banco con los pies plantados en el suelo. Coloca la barra sobre las caderas (usa una almohadilla para comodidad). Empuja las caderas hacia arriba contrayendo los glúteos hasta formar una línea recta desde rodillas hasta hombros. Baja de forma controlada.",
            commonMistakes: "No arquear excesivamente la espalda. Evitar empujar con los talones en lugar de contraer glúteos. No extender completamente las caderas en la posición superior."
          },
        ]
      },
      {
        groupName: 'Tren Superior',
        list: [
          { 
            title: "Press Plano Barra", 
            details: "Material: Banco plano + barra. No rebotes, bajada controlada.", 
            muscles: "Pectorales, hombros, tríceps", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Acuéstate en el banco con los pies firmes en el suelo. Agarra la barra con un agarre ligeramente más amplio que los hombros. Baja la barra de forma controlada hasta tocar el pecho. Empuja la barra hacia arriba hasta extender completamente los brazos.",
            commonMistakes: "No hacer rebotar la barra en el pecho. Evitar levantar las caderas del banco. No usar un agarre demasiado amplio o estrecho."
          },
          { 
            title: "Vuelo Frontal", 
            details: "Material: Mancuernas. Sin balanceo, movimiento controlado.", 
            muscles: "Deltoides anterior", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Párate con los pies a la anchura de los hombros, sostén las mancuernas frente a los muslos. Eleva los brazos hacia adelante hasta la altura de los hombros manteniendo una ligera flexión en los codos. Baja lentamente controlando el peso.",
            commonMistakes: "No balancear el cuerpo para generar impulso. Evitar subir las mancuernas por encima de la altura de los hombros. No usar un peso excesivo que comprometa la técnica."
          },
          { 
            title: "Tríceps Polea", 
            details: "Material: Polea alta. Codos fijos, no balancear cuerpo.", 
            muscles: "Tríceps", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Párate frente a la polea alta con los codos pegados al cuerpo. Agarra la cuerda o barra con las manos. Extiende los antebrazos hacia abajo manteniendo los codos fijos. Regresa lentamente a la posición inicial manteniendo la tensión.",
            commonMistakes: "No mover los codos durante el movimiento. Evitar balancear el cuerpo o usar impulso. No relajar completamente los tríceps en la posición inicial."
          },
          { 
            title: "Bíceps + Press Militar (Biserie)", 
            details: "Material: Mancuernas o barra. Control, sin balancear.", 
            muscles: "Bíceps y deltoides", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Realiza primero curl de bíceps: flexiona los codos llevando el peso hacia los hombros. Inmediatamente después, press militar: empuja el peso sobre la cabeza extendiendo completamente los brazos. Baja controladamente y repite la secuencia.",
            commonMistakes: "No balancear el cuerpo durante el curl de bíceps. Evitar arquear la espalda en el press militar. No usar impulso entre los dos movimientos."
          },
        ]
      }
    ]
  },
  {
    day: 'MIÉRCOLES',
    title: 'Piernas + Tren Superior',
    theme: 'miercoles',
    exercises: [
        {
            groupName: 'Piernas',
            list: [
                { 
                    title: "Camilla Isquio Monopodal", 
                    details: "Material: Camilla curl femoral. Una pierna a la vez.", 
                    muscles: "Isquiotibiales", 
                    reps: "3 series x 12 reps",
                    detailedTechnique: "Igual que la camilla de isquio regular, pero trabajando una pierna a la vez. Acuéstate boca abajo y coloca solo un tobillo bajo la almohadilla. Flexiona la rodilla llevando el talón hacia el glúteo. Completa todas las repeticiones con una pierna antes de cambiar.",
                    commonMistakes: "No compensar con la pierna que no está trabajando. Evitar torcer el cuerpo para ayudar al movimiento. No usar menos rango de movimiento que con ambas piernas."
                },
                { 
                    title: "Vitalización con Rusa", 
                    details: "Material: Pesa rusa (kettlebell). Peso muerto + sentadilla.", 
                    muscles: "Glúteos, isquios, core", 
                    reps: "3 series x 12 reps",
                    detailedTechnique: "Sostén la pesa rusa con ambas manos frente al cuerpo. Realiza un peso muerto llevando las caderas hacia atrás, luego al subir, continúa el movimiento haciendo una sentadilla. Es un movimiento fluido que combina ambos patrones de movimiento.",
                    commonMistakes: "No mantener la espalda recta durante todo el movimiento. Evitar separar los movimientos (deben ser fluidos). No usar un peso excesivo que comprometa la técnica."
                },
                { 
                    title: "Patada de Glúteos", 
                    details: "Material: Polea o banco. Pierna flexionada, empuje hacia atrás.", 
                    muscles: "Glúteos", 
                    reps: "3 series x 12 reps",
                    detailedTechnique: "En cuadrupedia o de pie en polea, mantén la pierna flexionada a 90°. Empuja la pierna hacia atrás y arriba contrayendo el glúteo. Mantén la cadera estable y el core activo. Regresa lentamente a la posición inicial manteniendo la tensión.",
                    commonMistakes: "No arquear excesivamente la espalda. Evitar rotar la cadera o el tronco. No usar impulso o movimientos bruscos."
                },
                { 
                    title: "Estocada Combinada con Sentadilla", 
                    details: "Material: Peso corporal o mancuernas. Alternancia estocada-sentadilla.", 
                    muscles: "Glúteos, cuádriceps, core", 
                    reps: "3 series x 12 reps",
                    detailedTechnique: "Realiza una estocada hacia adelante, regresa al centro y inmediatamente haz una sentadilla. Luego estocada con la otra pierna y otra sentadilla. Es una secuencia continua: estocada derecha - sentadilla - estocada izquierda - sentadilla.",
                    commonMistakes: "No mantener el ritmo y control durante toda la secuencia. Evitar descansar entre movimientos. No comprometer la técnica por la fatiga."
                },
            ]
        },
        {
            groupName: 'Tren Superior',
            list: [
                { 
                    title: "Jalón en Polea", 
                    details: "Material: Polea alta, agarre amplio. Espalda recta, pecho erguido.", 
                    muscles: "Dorsales, bíceps", 
                    reps: "3 series x 12 reps",
                    detailedTechnique: "Siéntate en la máquina con el pecho erguido y los hombros hacia atrás. Agarra la barra con un agarre más amplio que los hombros. Tira la barra hacia el pecho superior contrayendo los dorsales. Sube lentamente controlando el peso.",
                    commonMistakes: "No inclinarse hacia atrás excesivamente. Evitar tirar la barra hacia el cuello. No usar solo los brazos, enfocarse en contraer la espalda."
                },
                { 
                    title: "Vuelo Lateral", 
                    details: "Material: Mancuernas. Elevación lateral de brazos.", 
                    muscles: "Deltoides laterales", 
                    reps: "3 series x 12 reps",
                    detailedTechnique: "Párate con las mancuernas a los lados del cuerpo. Eleva los brazos hacia los lados hasta la altura de los hombros, manteniendo una ligera flexión en los codos. Baja lentamente controlando el peso. Mantén el tronco estable.",
                    commonMistakes: "No balancear el cuerpo o usar impulso. Evitar subir los brazos por encima de la altura de los hombros. No elevar los hombros durante el movimiento."
                },
                { 
                    title: "Tríceps Fondo en Banco", 
                    details: "Material: Banco. Manos en banco, flexión de codos.", 
                    muscles: "Tríceps", 
                    reps: "3 series x 12 reps",
                    detailedTechnique: "Siéntate en el borde del banco con las manos apoyadas al lado de las caderas. Desliza el cuerpo hacia adelante y baja flexionando los codos hasta que los brazos formen 90°. Empuja hacia arriba extendiendo los brazos. Mantén los codos cerca del cuerpo.",
                    commonMistakes: "No bajar demasiado para evitar lesiones en los hombros. Evitar separar los codos del cuerpo. No usar impulso con las piernas."
                },
            ]
        }
    ]
  },
  {
    day: 'JUEVES',
    title: 'Fuerza Total',
    theme: 'jueves',
    exercises: [
      {
        groupName: 'Rutina Completa',
        list: [
          { 
            title: "Sillón Cuádriceps Monopodal y Doble", 
            details: "Técnica: Primero una pierna, luego ambas.", 
            muscles: "Cuádriceps", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Primero realiza extensiones de cuádriceps con una sola pierna (técnica igual que el monopodal del lunes). Después de completar las repeticiones con una pierna, cambia a la otra. Finalmente, realiza repeticiones con ambas piernas simultáneamente.",
            commonMistakes: "No mantener la misma intensidad en ambas piernas. Evitar descansar demasiado entre las diferentes variaciones. No comprometer la técnica por la fatiga acumulada."
          },
          { 
            title: "Empuje de Cadera", 
            details: "Técnica: Igual que martes.", 
            muscles: "Glúteos, isquios", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Misma técnica que el martes: apoya la espalda media en un banco, coloca la barra sobre las caderas y empuja hacia arriba contrayendo los glúteos. Forma una línea recta desde rodillas hasta hombros. Baja controladamente.",
            commonMistakes: "Mismos errores que el martes: no arquear la espalda, no empujar con los talones, asegurar extensión completa de cadera."
          },
          { 
            title: "Twist en Colchoneta", 
            details: "Técnica: Giro de tronco tocando el suelo.", 
            muscles: "Abdominales oblicuos", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Siéntate en la colchoneta con las rodillas flexionadas y los pies elevados. Inclínate ligeramente hacia atrás manteniendo la espalda recta. Gira el tronco hacia un lado tocando el suelo con las manos, regresa al centro y gira hacia el otro lado. Mantén el core activo.",
            commonMistakes: "No redondear la espalda durante el movimiento. Evitar usar impulso para girar. No bajar los pies al suelo durante el ejercicio."
          },
          { 
            title: "Press Militar", 
            details: "Técnica: Empuje sobre la cabeza.", 
            muscles: "Hombros, tríceps", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Párate con los pies a la anchura de los hombros, sostén las mancuernas o barra a la altura de los hombros. Empuja el peso sobre la cabeza extendiendo completamente los brazos. Baja controladamente hasta la posición inicial. Mantén el core activo.",
            commonMistakes: "No arquear excesivamente la espalda. Evitar empujar la cabeza hacia adelante. No usar impulso con las piernas."
          },
          { 
            title: "Remo 90°", 
            details: "Técnica: Flexión de cadera, tirón hacia abdomen.", 
            muscles: "Dorsales, romboides, bíceps", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Inclínate hacia adelante manteniendo la espalda recta (aproximadamente 90°). Sostén las mancuernas o barra con los brazos extendidos. Tira el peso hacia el abdomen contrayendo los músculos de la espalda. Baja controladamente manteniendo la posición del tronco.",
            commonMistakes: "No redondear la espalda durante el movimiento. Evitar usar impulso o balancear el cuerpo. No tirar el peso hacia el pecho en lugar del abdomen."
          },
          { 
            title: "Bíceps (Curl)", 
            details: "Técnica: Flexión de codos controlada.", 
            muscles: "Bíceps", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Párate con los brazos extendidos a los lados del cuerpo, sostén las mancuernas o barra. Flexiona los codos llevando el peso hacia los hombros manteniendo los codos pegados al cuerpo. Baja lentamente controlando el peso hasta la extensión completa.",
            commonMistakes: "No balancear el cuerpo o usar impulso. Evitar mover los codos hacia adelante o hacia atrás. No realizar repeticiones parciales."
          },
          { 
            title: "Tríceps Sobre Cabeza", 
            details: "Técnica: Extensión con mancuerna o polea.", 
            muscles: "Tríceps", 
            reps: "3 series x 12 reps",
            detailedTechnique: "Sostén una mancuerna con ambas manos sobre la cabeza o usa una polea. Mantén los codos apuntando hacia adelante y baja el peso flexionando solo los antebrazos. Extiende los brazos completamente regresando a la posición inicial. Mantén los codos estables.",
            commonMistakes: "No mover los codos durante el movimiento. Evitar arquear la espalda. No usar un peso excesivo que comprometa el rango de movimiento."
          },
        ]
      }
    ]
  }
];

export const planNovia = {
  progression: [
    { weeks: "1 y 2", sets_reps: "3 x 12", notes: "Adaptación y técnica" },
    { weeks: "3 y 4", sets_reps: "3 x 14", notes: "Sumar 2 repeticiones" },
    { weeks: "5 a 8", sets_reps: "3 x 12", notes: "Bajar reps y subir la carga" }
  ],
  warmup: [
    { title: "Activación General", details: "Miembros superiores e inferiores", reps: "5 min" },
    { title: "Puente Frontal (Plank)", details: "Mantener cuerpo recto", reps: "2 x 20 seg" },
    { title: "Movilidad Vertical con Banda", details: "Movimiento controlado", reps: "2 x 12" }
  ],
  trainingDays: [
    {
      day: 'DÍA 1', theme: 'lunes', title: 'Full Body A',
      exercises: [
        { groupName: 'Piernas', list: [
            { title: 'Estocada Dinámica (Carga Unilateral)', reps: '3x12' },
            { title: 'Sentadilla Dinámica con Mancuernas', reps: '3x12' },
            { title: 'Sillón de Cuádriceps', reps: '3x12' },
            { title: 'Subidas al Cajón (Inicia de rodillas)', reps: '3x12' }
        ]},
        { groupName: 'Tren Superior', list: [
            { title: 'Dorsal en Polea (Toma Prona)', reps: '3x12' },
            { title: 'Remo 45° en Polea', reps: '3x12' },
            { title: 'Apertura en Colchoneta', reps: '3x12' },
            { title: 'Tríceps Unilateral en Banco Plano', reps: '3x12' }
        ]}
      ]
    },
    {
      day: 'DÍA 2', theme: 'martes', title: 'Full Body B',
      exercises: [
        { groupName: 'Piernas', list: [
            { title: 'Vitalización con Pesa Rusa', reps: '3x12' },
            { title: 'Prensa 45°', reps: '3x12' },
            { title: 'Patada de Glúteo en Polea Media', reps: '3x12' },
            { title: 'Traslados Laterales con Banda', reps: '3x12' }
        ]},
        { groupName: 'Tren Superior', list: [
            { title: 'Press Banco Plano Alterno con Mancuerna', reps: '3x12' },
            { title: 'Vuelo Posterior en Polea (Soga)', reps: '3x12' },
            { title: 'Bíceps + Press Militar', reps: '3x12' },
            { title: 'Apertura de Pies con Mancuernas', reps: '3x12' }
        ]}
      ]
    },
    {
      day: 'DÍA 3', theme: 'miercoles', title: 'Full Body C',
      exercises: [
          { groupName: 'Piernas', list: [
              { title: 'Subidas al Cajón + Sentadilla', reps: '3x12' },
              { title: 'Prensa 45° (Empuje Ancho y Abierto)', reps: '3x12' },
              { title: 'Abducción en Máquina', reps: '3x12' },
              { title: 'Sillón de Cuádriceps Unilateral', reps: '3x12' }
          ]},
          { groupName: 'Tren Superior', list: [
              { title: 'Press Arnold', reps: '3x12' },
              { title: 'Remo 90° (Manillar Ancho)', reps: '3x12' },
              { title: 'Vuelo de Rango Completo en Colchoneta', reps: '3x12' },
              { title: 'Tríceps Francés', reps: '3x12' },
              { title: 'Apertura Banco Inclinado', reps: '3x12' }
          ]}
      ]
    },
    {
        day: 'DÍA 4', theme: 'jueves', title: 'Full Body D',
        exercises: [
            { groupName: 'Piernas', list: [
                { title: 'Abducción en Polea', reps: '3x12' },
                { title: 'Estocada Búlgara', reps: '3x12' },
                { title: 'Empuje de Cadera en Máquina', reps: '3x12' }
            ]},
            { groupName: 'Tren Superior', list: [
                { title: 'Vuelo de Rango Completo', reps: '3x12' },
                { title: 'Remo Posterior con Mancuernas', reps: '3x12' },
                { title: 'Press Militar con Mancuernas', reps: '3x12' },
                { title: 'Remo Hummer', reps: '3x12' }
            ]}
        ]
    }
  ]
};

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';
